version "4.4"

#include "examples.zsc"

class MetaParticle {
	double size, alpha;
	color col;
	int life;
	vector3 pos, vel;
}

class MetaParticleHandler : Actor {
	array<MetaParticleData> particles;
	int maxparticles;
	property MaxParticles: MaxParticles;
	default { +NOINTERACTION; }

	override void PostBeginPlay() {
		super.PostBeginPlay();
		particles.resize(maxparticles);
		for (int i = 0; i < maxparticles; i++) {
			if (!particles[i]) {
				particles[i] = new("MetaParticleData");
				ParticleInit(particles[i], true);
			}
		}
	}

	virtual void ParticleInit(MetaParticleData p, bool first) {	}
	virtual void ParticleUpdate(MetaParticleData p) {	}

	void ParticleTick(MetaParticleData p) {
		p.pos += p.vel;
		p.life--;
		if (p.life <= 0) p.Destroy();
	}

	override void Tick() {
		super.Tick();
		if(isFrozen()) { return; }
		if (maxparticles == 0) { return; }
		if (particles.size()<1 || MaxParticles<= 0) { return; }
		for (int i = 0; i < maxparticles; i++) {
			if (!particles[i]) {
				particles[i] = new("MetaParticleData");
				ParticleInit(particles[i], false);
			}
			MetaParticleData cmp = particles[i];
			self.A_SpawnParticle(
				cmp.col,
				flags: SPF_RELATIVE,
				lifetime: 1,
				size: cmp.size,
				xoff: cmp.pos.x,
				yoff: cmp.pos.y,
				zoff: cmp.pos.z,
				velx: cmp.vel.x,
				vely: cmp.vel.y,
				velz: cmp.vel.z,
				startalphaf: cmp.alpha
			);
			ParticleUpdate(cmp);
			ParticleTick(cmp);
		}
	}
}
